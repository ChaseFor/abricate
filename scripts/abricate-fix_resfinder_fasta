#!/usr/bin/env perl
use warnings;
use strict;
use Bio::SeqIO;

unless (@ARGV) {
  print STDERR "Usage: $0 resfinder*.fsa > clean.fasta\n";
  exit -1;
}

my $in = Bio::SeqIO->new(-fh=>\*ARGV, -format=>'fasta');
my $out = Bio::SeqIO->new(-fh=>\*STDOUT, -format=>'fasta');

my $read=0;
my $wrote=0;
my $fixed=0;
my $dupe=0;
my %seen;

while (my $seq = $in->next_seq) {
  my $id = $seq->display_id;
  $read++;

  if ($seq->length % 3 != 0) {
    print STDERR "$id - skipping as length ".$seq->length." not multiple of 3\n";
    next;
  }

  if ($seq->seq !~ m/^[AGCT]+$/i) {
    print STDERR "$id - skipping due to non-AGTC bases\n";
    next;
  }
  
  my $aa = $seq->translate->seq;
  if ($aa =~ m/\*./) {
    print STDERR "$id - has internal stop codons, trying revcom\n";
    $aa = $seq->revcom->translate->seq;
    if ($aa =~ m/\*./) {
      print STDERR "$id - revcom has internal stop codons too, skipping\n";
      next;
    }
    else {
      print STDERR "$id - revcom resolves problem, hooray\n";
      $seq = $seq->revcom;
      $fixed++;
    }
  }

  if ($seen{ uc($seq->seq) }++) {
    print STDERR "$id - skipping duplicate DNA sequence\n";
    $dupe++;
    next;
  }

  print STDERR "$id - ok\n";
  $out->write_seq($seq);
  $wrote++;
}

printf STDERR "Read $read, wrote $wrote (fixed $fixed), discarded %d ($dupe duplicates)\n", $read-$wrote;

